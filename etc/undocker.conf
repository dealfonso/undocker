#!/bin/bash
#
# undocker
# Copyright (C) - Docker for unprivileged users
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ------------------------------------------------------------------------
# IMPORTANT: this file MUST not be writable by arbitrary users
# ------------------------------------------------------------------------

[main]
# "main" section corresponds to the settings for the undocker application

# In case that a flag/parameter is blacklisted, setting ERROR_ON_BLACKLISTED to "true" will
#   make that the run will fail. Otherwise, the blacklisted command will simply skipped
ERROR_ON_BLACKLISTED=true

# The path for the docker application (if not set, it will be assumed that it is in the path)
DOCKERPATH=

# This is the definition of the whitelisted parameters. The syntax is a comma separated list
#   of parameter definition:
#       --flag|-F|-f <paramname1> <paramname2> ... 
#   When parsing the parameters, each option will be tested and undocker will skip as many
#   parameters as <paramname1> strings.
#       e.g.
#           -l|--log-level string
#         will accept both "undocker -l debug" and "undocker --log-level debug"
WHITELIST="--config string", \
"-D|--debug", \
"--help", \
"-H|--host list", \
"-l|--log-level string", \
"--tls", \
"--tlscacert string", \
"--tlscert string", \
"--tlskey string", \
"--tlsverify", \
"-v|--version"

# This is the definition of the blacklisted parameters. That means that if used when running
#   undocker, these parameters will not be included in the final call to docker. The BLACKLIST
#   option has precedence over WHITELIST. That means that if one parameter appear in the BLACKLIST
#   it will not appear in the final call even if it appears in the WHITELIST.
#
#   The syntax is the same than in the WHITELIST parameter.
BLACKLIST=

# The commands that are accepted to be ran are included as sections in the form [command:<commandname>]
#   Some examples are [command:exec] or [command:run]. If a command does not appear as a section, it
#   will not be permitted
#
# A section can be specified for a group of linux users using a section name with the format
#       [command:<command> group:<group>]
#   In that case, the configuration will affect only to the users that belong to the linux group <group>.
#
# A section can be specified for a specific linux users using a section name with the format
#       [command:<command> user:<username>]
#   In that case, the configuration will affect only to the user with the username <username>.
#
# In case that multiple sections are applicable to the specific run, the values for WHITELIST, BLACKLIST, 
#   FORCED, ALLOWEDIMAGES and RESTRICTEDIMAGES is accumulated to build the final one (i.e. is inherited).
#
#   E.g. 
#       [command:run]
#       ...
#       FORCED=-u $U_UID:$G_GID
#       [command:run user:ubuntu]
#       FORCED=-v $PWD:$PWD
#
#   Will make that the user "ubuntu" is allowed to use the "docker run" command, but the FORCED variable
#     will be the result of the two sections that are applicable to that user: the general one and the
#     specific for the user: FORCED=-u $U_UID:$G_GID -v $PWD:$PWD
#
# In each section definition, it is possible to include the following vars:
#   WHITELIST, BLACKLIST, FORCED, UIDMUSTMATCH, ALLOWEDIMAGES, RESTRICTEDIMAGES
# 
# Parameters WHITELIST and BLACKLIST have the same meaning and syntax explained in the [main] section
#   but applied to the specific command.
#
# > FORCED is the commandline that is forced to appear in the final call to docker, immediately after 
#   than the parameters included by the user in the undocker call.
#
#     e.g. FORCED=-u $UID:GID in [command:run] will make that when the user issues the command
#            undocker run --rm -it alpine
#          will make that the finall call will look like
#            docker run --rm -it -u $UID:$GID alpine
#
#   * IMPORTANT: the forced parameters have more precedence than the parameters included by the user; so
#       if a user sets (e.g.) undocker run -w /my/folder, but FORCED is set to -w $PWD, the resulting
#       docker call will use -w $PWD
#
# > ALLOWEDIMAGES is a space separated list of images that are allowed to be used. Each image may be a
#     regular expression. E.g. ubuntu:.* will match ubuntu:latest, ubuntu:18.04, etc.
#   
#   * If ALLOWEDIMAGES is empty, any image will be considered valid
#
#   * WARNING: define this parameter only for commands that expect a image name as the parameter
#
# > RESTRICTEDIMAGES is a space separated list of images that are not allowed to be used. Each image may
#      be a regular expression. E.g. ubuntu:.* will match ubuntu:latest, ubuntu:18.04, etc.
#      * RESTRICTEDIMAGES has priority over ALLOWEDIMAGES (i.e. if the image is allowed, but also is
#        restricted, it will be restricted).
#
#   * If RESTRICTEDIMAGES is empty no image will be considered restricted
#
#   * WARNING: define this parameter only for commands that expect a image name as the parameter
#
# > UIDMUSTMATCH=true makes a prior check to execute the docker command. If the user does not own the
#   container (i.e. has not been ran using the -u parameter), the user cannot operate on the container.
#   The name of the container is assumed to be the first non-parameter after the command.
#   
#   * WARNING: define this parameter only for commands that expect a container id as the parameter
#
# -----------------------------------------------------------------------------------------------------
# Definition of a set of commands to enable common users to run docker
# -----------------------------------------------------------------------------------------------------
[command:exec]
# It is imporant to define the parameters as docker expect to find them (e.g --volume needs a parameter that
#   docker names "list" in its help)
WHITELIST=--help,-i|--interactive,-t|--tty,-v|--volume list
# In each part of this file you can use the variables in the ENV (e.g. $PWD), but also $U_UID, that contains
#   the caller's user id, and $U_GID that contains the caller's main linux group.
#
#   * WARNING: $UID contains the effective user id, which will probably be "0" (root)
FORCED=-u $U_UID:$U_GID
# The user can only interact with the container in case that he/she is the owner.
UIDMUSTMATCH=true

[command:run]
WHITELIST=--help,-i|--interactive,-t|--tty,-d|--detach,--rm,-e|--env list,-v|--volume list,-w|--workdir string,--name string
# This is an example of the "FORCED" parameters, that have more importance than the parameters issued by the user
#   as they are added to the end of the docker call.
FORCED=-u $U_UID:$U_GID -v '$PWD:$PWD' -w '$PWD'

[command:run user:ubuntu]
# This is an example of setting the images that the users are allowed to run
ALLOWEDIMAGES=alpine:.* ubuntu:.*

[command:run group:users]
# This is an example of restricting docker images. In case that the "ubuntu" user is also in "users" group, even
#   ubuntu:14.04 is matching ubuntu:.*, it will not be allowed because of being a restricted image
RESTRICTEDIMAGES=ubuntu:14.04

[command:ps]
WHITELIST=--help,-q|--quiet,-a|--all,-f|--filter filter,--format string,-n|--last int,-l|--latest,--no-trunc,-s|--size

[command:ps group:users]
# This is an example of blacklisting a parameter for a specific group of linux users that was whitelisted for the others
BLACKLIST=-a|--all

[command:inspect]
WHITELIST=--help,-f|--format string,-s|--size,--type string
# This is an example of usage of UIDMUSTMATCH: a user is not allowed to inspect a container if it was not created by him
UIDMUSTMATCH=true

[command:stop]
WHITELIST=--help,-t|--time int
# This is an example of usage of UIDMUSTMATCH: a user is not allowed to stop a container if it was not created by him
UIDMUSTMATCH=true

[command:rm]
WHITELIST=-f|--force,--help,-l|--link,-v|--volumes
# This is an example of usage of UIDMUSTMATCH: a user is not allowed to remove a container if it was not created by him
UIDMUSTMATCH=true